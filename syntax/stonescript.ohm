Stonescript {
  Program          =  Statement*
  Statement        =  ForLoop "!"
                   |  WhileLoop "!"
                   |  Conditional "!"
                   |  Declaration "!"
                   |  Assignment "!"
                   |  Call "!"
                   |  Break "!"
                   |  Exp "!"
  Func             =  "YABBADABBADOO" "(" listOf<Arg, ", "> ")"
                      "PART" Statement* Return? "NOT PART"
  Exp              =  Exp "OR" Exp1                          -- or
                   |  Exp "AND" Exp1                         -- and
                   |  Exp1
  Exp1             =  Exp1 mulop Exp2                        -- binary
                   |  Exp2
  Exp2             =  Exp2 addop Exp3                        -- binary
                   |  Exp3
  Exp3             =  Exp4 relop Exp4                        -- binary
                   |  Exp4
  Exp4             =  "NOT" Exp4                             -- unary
                   |  Exp5
  Exp5             =  Func
                   |  Array                                  -- arr
                   |  EmptyArray
                   |  Tablet                                 -- obj
                   |  TabletDec
                   |  Call
                   |  boollit
                   |  intlit
                   |  strlit
                   |  "(" Exp ")"                           -- parens
                   |  id

  ExpList          =  Exp ("," Exp)*
  Arg              =  type id
  TabletDec        =  "PART" ListOf<Arg, ","> "NOT PART"
  Tablet           =  id "PART" (Assignment "!")* "NOT PART"
  Return           =  ("GIVE" Exp "!") | ("GIVE" nothing "!")
  Break            =  "RAGEQUIT"
  Array            =  "CAVEIN" ListOf<Exp, ","> "CAVEOUT"
  EmptyArray			 =  "CAVEIN" "CAVEOUT"
  Declaration      =  TypeDec id "IS" Exp
  TypeDec          =  mutability type array?
  Assignment       =  id "IS" Exp
  Call             =  ("SPEAK" | "HUNTDOWN" | "TYPE" | "DATE" | "SIZE" | "DACHAR" 
                   |  "GOAWAY" | "GOHIGH" | "DALENGTH" | "BIGHUG" | id) "(" listOf<Exp, ","> ")"
  Field            =  id "THINGIS" Exp "!"
  Conditional      =  "OOF" "(" Exp ")" "PART" Body "NOT PART"
                      ("OOOF" "(" Exp ")" "PART" Body "NOT PART" )*
                      ("OOFF" "PART" Body "NOT PART" )?
  Setup            =  Declaration | Assignment
  ForLoop          =  "FOR" "(" Setup "!" Exp3 "!" ForIncrement ")"
                      "PART" Body "NOT PART"
  ForIncrement     =  id "IS" id addop intlit
  WhileLoop        =  "WHILE" "(" RelExp ")" "PART" Body "NOT PART"
  RelExp           =  Exp4 (relop Exp4)?
  Body             =  Statement*

  keyword          =  ("YESNOS" | "OOF" | "OOOF" | "OOFF" | "FOR" | "GIVE" | "WHAT"
                   |  "WHILE" | "SQUISH" | "RIP" | "PART" | "THINGIS" | "IS" | "LEFT"
                   |  "CUT" | "OOGA" | "WORDERS" | "YABBADABBADO" | "NOOGA" | "SPEAK"
                   |  "RAGEQUIT" | "HUNTDOWN" | "TYPE" | "DATE" | "SIZE" | "DACHAR" 
                   |  "GOAWAY" | "GOHIGH" | "DALENGTH" | "BIGHUG" | primtype | "NOT PART") ~idrest
  mutability       =  ("ROCK" | "BEDROCK")
  funckeyword      =  "SPEAK"
  boollit          =  "OOGA"
                   |  "NOOGA"
  intlit           =  digit+
  strlit           =  "\"" (~"\\" ~"\"" ~"\n" any)* "\""
  nothing          =  "WHAT"
  id               =  ~keyword letter idrest*
  idrest           =  "_" | alnum
  type             =  "COUNTERS" | "WORDERS" | "YESNOS" | "WHAT" | "DOERS" | "TABLET" | "CAVE"
  array            =  "CAVE"
  addop            =  "SQUISH" | "RIP"
  relop            =  "NOT SMASH OR IS" | "NOT SMASH" | "IS IS" | "NOT IS" | "SMASH OR IS" | "SMASH"
  mulop            =  "MANY" | "CUT" | "LEFT"
  primtype         =  "YESNOS" | "COUNTERS" | "WORDERS" | "WHAT"

  newline          =  "\n"+
  space            += comment | multiLineComment
  comment          = "ðŸ¦–" ~"ðŸ¦–" (~newline ~"ðŸ¦–" any)* ~"ðŸ¦–"
  multiLineComment = "ðŸ¦•" (~"ðŸ¦•" any)* "ðŸ¦•"
}