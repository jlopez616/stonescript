StoneScript {
  Program          =  Statement*
  Statement        =  Loop
  				         |  Conditional
                   |  Declaration
                   |  Assignment
                   |  Call
                   |  Return
                   |  Exp
                   |  comment
  Loop             =  For | While
  Declaration      =  "ROCK" id "IS" Exp

  Assignment       = id "IS" Exp
  Call             =  funckeyword "(" listOf<Primary, ","> ")"
                   |  id "(" listOf<Primary, ","> ")"
  Primary          =  Func | Exp | numlit | strlit | boollit | Call | Array | id
  Func             =  ("YABBADABBADOO" "(" listOf<id, ","> ")")? "PART" Statement* "NOT PART"
  Exp              =  Exp "or" Exp1                          -- or
                   |  Exp "and" Exp1                         -- and
                   |  Exp1
  Exp1             =  Exp1 relop Exp2                        -- binary
                   |  Exp2
  Exp2             =  Exp2 addop Exp3                        -- binary
                   |  Exp3
  Exp3             =  Exp3 mulop Exp4                        -- binary
                   |  Exp4
  Exp4             = Func
  					       | Exp5
  Exp5             = Exp6 postfixop                          --postfix
                   | Exp6
  Exp6             =  Array                                  -- list
                   |  Call
                   |  boollit
                   |  numlit
                   |  strlit
                   |  Paren
  Paren            = "(" Exp ")"
  ExpList          =  Exp ("," Exp)*
  Return           =  "GIVE" Primary
  Array            =  "CAVEIN" ListOf<Primary, ","> "CAVEOUT"
  For              =  "FOR" LoopContainer "PART" Body "NOT PART"
  Conditional  =      "OOF"
  LoopContainer    =  "(" Setup ";" Exp ";" Assignment ")"
  Setup            =  Declaration | Assignment
  While            =  "WHILE" "(" RelExp ")" "PART" Body "NOT PART"
  RelExp           =  id relop Primary
  Body             =  Statement+
  keyword          =  ("YESNOS" | "OOF" | "OTHER" |  "FOR"  | "GIVE" |  "WHAT" | "WHILE" | "SQUISH" | "RIP" | primtype
                     | "OOGA" | "WORDERS" |  "YABBADABBADO" |  "NOOGA" | "SPEAK" | "PART" | "NOT PART") ~idrest
  funckeyword      =  "SPEAK"
  boollit          =  "OOGA"
                   |  "NOOGA"
  numlit           =  digit+ ("." digit+)?
  strlit           =  "\"" (~"\\" ~"\"" ~"\n" any)* "\""
  nothing          =  "WHAT"
  id               =  ~keyword letter idrest*
  idrest           =  "_" | alnum
  addop            =  "SQUISH" | "RIP"
  relop            =  "NOT SMASH OR IS" | "NOT SMASH" | "IS IS" | "NOT IS" | "SMASH OR IS" | "SMASH"
  mulop            =  "MANY" | "BREAK" | "LEFT"
  postfixop        =  id "LITTLE" "SQUISH"
                   |  id "LITTLE"  "RIP"
  primtype         =  "YESNOS" | "COUNTERS" | "WONDERS" | "WHAT"
  indent           =  "â‡¨"
  dedent           =  "â‡¦"
  newline          =  "\n"+
  comment          = "ðŸ¦–" ~"ðŸ¦–" (~newline ~"ðŸ¦–" any)* ~"ðŸ¦–"                      -- comment
                   | multiLineComment
  multiLineComment = "ðŸ¦•" (~"ðŸ¦•" any)* "ðŸ¦•"
}
