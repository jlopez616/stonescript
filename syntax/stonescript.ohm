StoneScript {
  Program          =  (Statement)*
  Statement        =  Loop "!"
  				   |  Conditional "!"
                   |  Declaration "!"
                   |  Assignment "!"
                   |  Call "!"
                   |  Return "!"
                   |  Exp "!"
                   |  comment ""
  Primary          =  Func | Exp | numlit | strlit | boollit | Call | Array | id
  Func             =  "YABBADABBADOO" "(" listOf<id, ", "> ")" "PART" Statement* "NOT PART"
  Exp              =  Exp "OR" Exp1                          -- or
                   |  Exp "AND" Exp1                         -- and
                   |  Exp1
  Exp1             =  Exp1 mulop Exp2                        -- binary
                   |  Exp2
  Exp2             =  Exp2 addop Exp3                        -- binary
                   |  Exp3
  Exp3             =  Exp3 relop Exp4                        -- binary
                   |  Exp4
  Exp4             = "NOT" Exp4                                -- not
  						     | Exp5
  Exp5             = Func
  				         | Exp6
  Exp6             =  Array                                  -- list
                   | Exp7
  Exp7             =  Object                                  -- list
                   |  Call
                   |  boollit
                   |  numlit
                   |  strlit
                   |  Paren
                   |  id

  Paren            = "(" Exp ")"
  ExpList          =  Exp ("," Exp)*
  Return           =  "GIVE" Primary
  Array            =  "CAVEIN" ListOf<Primary, ","> "CAVEOUT"
  Declaration      =  ("ROCK" | "BEDROCK") id "IS" Exp
  Assignment     = id "IS" Exp
  Call             =  funckeyword "(" listOf<Primary, ","> ")"
                   |  id "(" listOf<Primary, ","> ")"
  Loop             =  For | While
  LoopContainer    =  "(" Setup ";" Exp3 ";" Assignment ")"	
  Object           =  "PART" Field* "NOT" "PART"
  Field            =  id "THINGIS" Exp "!"
  Conditional      =  "OOF" "(" Exp ")" "PART" Body "NOT PART"
                      ("OOOF" "(" Exp ")" "PART" Body "NOT PART" )*
                      ("OOFF" "PART" Body "NOT PART" )?
  Setup            =  Declaration | Assignment
  For              =  "FOR" LoopContainer "PART" Body "NOT PART"
  While            =  "WHILE" "(" RelExp ")" "PART" Body "NOT PART"
  RelExp           =  id relop Primary
  Body             =  Program
  keyword          =  ("YESNOS" | "OOF" | "OOOF" | "OOFF" |  "FOR"  | "GIVE" |  "WHAT" | "WHILE"
                   | "SQUISH" | "RIP" | primtype | "THINGIS"
                   | "OOGA" | "WORDERS" |  "YABBADABBADO" |  "NOOGA" | "SPEAK" | "PART"
                   | "NOT PART") ~idrest
  funckeyword      =  "SPEAK"
  boollit          =  "OOGA"
                   |  "NOOGA"
  numlit           =  digit+ ("." digit+)?
  strlit           =  "\"" (~"\\" ~"\"" ~"\n" any)* "\""
  nothing          =  "WHAT"
  id               =  ~keyword letter idrest*
  idrest           =  "_" | alnum
  addop            =  "SQUISH" | "RIP"
  relop            =  "NOT SMASH OR IS" | "NOT SMASH" | "IS IS" | "NOT IS" | "SMASH OR IS" | "SMASH"
  mulop            =  "MANY" | "BREAK" | "LEFT"
  primtype         =  "YESNOS" | "COUNTERS" | "WONDERS" | "WHAT"
  newline          =  "\n"+
  comment          = "ðŸ¦–" ~"ðŸ¦–" (~newline ~"ðŸ¦–" any)* ~"ðŸ¦–"                      -- comment
                   | multiLineComment
  multiLineComment = "ðŸ¦•" (~"ðŸ¦•" any)* "ðŸ¦•"
}